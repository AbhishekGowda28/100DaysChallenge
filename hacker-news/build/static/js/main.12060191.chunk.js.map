{"version":3,"sources":["services/agent.js","constants/url.js","components/Story.jsx","services/api.js","helper/mapTime.js","components/Loader.jsx","constants/constants.js","components/StoriesContainer.jsx","components/Credits.jsx","components/Title.jsx","App.jsx","serviceWorker.js","index.js"],"names":["get","url","a","fetch","then","response","responseData","json","data","console","log","catch","error","BASE_URL","HackerNewsURL","USER","ITEM","MAX_ITEM","TOP_STORIES","NEW_STORIES","BEST_STORIES","Story","React","memo","storyId","useState","story","setStory","useEffect","itemId","item","id","title","by","time","result","className","data-testid","href","target","timeDiff","Math","floor","Date","interval","seconds","toFixed","mapTime","Loader","STORY_INCREMENT","window","innerHeight","StoriesContainer","props","state","newStoryIds","counts","handleScroll","bind","new_stories_list","newStoreiesIds","undefined","setState","addEventListener","this","removeEventListener","scrollPosition","document","documentElement","scrollTop","offSetHeight","offsetHeight","totalScroll","length","slice","map","index","key","Component","Credits","Title","App","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","render","StrictMode","getElementById","URL","process","origin","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.12060191.chunk.js","sourcesContent":["async function get(url) {\r\n    return fetch(url)\r\n        .then((response) => {\r\n            return response;\r\n        })\r\n        .then((responseData) => {\r\n            return responseData.json();\r\n        })\r\n        .then((data) => {\r\n            console.log(\"data\", data);\r\n            return data;\r\n        })\r\n        .catch((error) => {\r\n            console.error(`Error in getting data from ${url}`, error);\r\n        });\r\n}\r\n\r\nexport { get };","const BASE_URL = \"https://hacker-news.firebaseio.com/v0\";\r\n\r\nconst HackerNewsURL = {\r\n    USER: `${BASE_URL}/user/`,\r\n    ITEM: `${BASE_URL}/item/`,\r\n    MAX_ITEM: `${BASE_URL}/maxitem.json`,\r\n    TOP_STORIES: `${BASE_URL}/topstories.json`,\r\n    NEW_STORIES: `${BASE_URL}/newstories.json`,\r\n    BEST_STORIES: `${BASE_URL}/beststories.json`\r\n}\r\n\r\nexport { HackerNewsURL };","import React from \"react\";\r\nimport { getItem } from \"../services/api\";\r\nimport { mapTime } from \"../helper/mapTime\";\r\n\r\nconst Story = React.memo(\r\n\r\n    function Story({ storyId }) {\r\n\r\n        const [story, setStory] = React.useState({});\r\n\r\n        React.useEffect(() => {\r\n            getItem(storyId).then((result) => {\r\n                setStory(result);\r\n            })\r\n        }, [storyId]);\r\n\r\n        return (\r\n            story?.url ?\r\n                <div className=\"story\" data-testid=\"story\">\r\n                    <div className=\"storyTitle\" data-testid=\"story-title\">\r\n                        <a href={story.url} target=\"__blank\">{story.title}</a>\r\n                    </div>\r\n                    <div className=\"storyMeta\">\r\n                        <div className=\"storyMetaElement story__author\" data-testid=\"story-author\">\r\n                            <span>Author: </span>\r\n                            {story.by}\r\n                        </div>\r\n                        <div className=\"storyMetaElement story__time\" data-testid=\"story-time\">\r\n                            <span>Posted : </span>\r\n                            {mapTime(story.time * 1000)}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                : null\r\n\r\n        );\r\n    }\r\n)\r\n\r\nexport { Story }\r\n","import {get } from \"./agent\";\r\nimport { HackerNewsURL } from \"../constants/url\";\r\n\r\nfunction getNewStorieIds() {\r\n    return get(HackerNewsURL.NEW_STORIES).then((new_stories_list) => {\r\n        return new_stories_list;\r\n    });\r\n}\r\n\r\nfunction getItem(itemId) {\r\n    const url = `${HackerNewsURL.ITEM}${itemId}.json`;\r\n    return get(url).then((item) => {\r\n        if (item !== null) {\r\n            return { id: item.id, title: item.title, url: item.url, by: item.by, time: item.time };\r\n        }\r\n    });\r\n}\r\n\r\nexport {\r\n    getNewStorieIds,\r\n    getItem\r\n};","function mapTime(time) {\r\n\r\n    const timeDiff = Math.floor((new Date() - time) / 1000);\r\n\r\n    const Seconds_In_A_Year = 31536000;\r\n    const Seconds_In_A_Month = 2592000;\r\n    const Seconds_In_A_Day = 86400;\r\n    const Seconds_In_A_Hour = 3600\r\n    const Seconds_In_A_Minute = 60;\r\n\r\n    let interval = Math.floor(timeDiff / Seconds_In_A_Year);\r\n\r\n    if (interval > 1) {\r\n        return `${interval} Years ago`;\r\n    }\r\n    interval = Math.floor(timeDiff / Seconds_In_A_Month);\r\n    if (interval > 1) {\r\n        return `${interval} Months ago`;\r\n    }\r\n    interval = Math.floor(timeDiff / Seconds_In_A_Day);\r\n    if (interval > 1) {\r\n        return `${interval} Days ago`;\r\n    }\r\n    interval = Math.floor(timeDiff / Seconds_In_A_Hour);\r\n    if (interval > 1) {\r\n        return `${interval} Hours ago`;\r\n    }\r\n    interval = Math.floor(timeDiff / Seconds_In_A_Minute);\r\n    if (interval > 1) {\r\n        return `${interval} Minutes ago`;\r\n    } else {\r\n        interval = Math.floor(timeDiff / 60);\r\n        const seconds = timeDiff / 60;\r\n        if (interval === 0) {\r\n            return `${seconds.toFixed(0)} seconds ago`;\r\n        } else if (seconds.toFixed(0) === \"0\") {\r\n            return \"Just now\";\r\n        } else {\r\n            return `${interval} Minute ${seconds.toFixed(0)} seconds ago`;\r\n        }\r\n    }\r\n}\r\n\r\nexport { mapTime };","import React from \"react\";\r\n\r\nfunction Loader() {\r\n    return (\r\n        <div className=\"loader\" data-testid=\"loader\">Loading...</div>\r\n    );\r\n}\r\n\r\nexport { Loader }\r\n","const MAX_STORIES = 500;\r\nlet STORY_INCREMENT = 10;\r\n\r\nif (window.innerHeight < 500) {\r\n    STORY_INCREMENT = 5;\r\n} else if (window.innerHeight > 950 && window.innerHeight < 1320) {\r\n    STORY_INCREMENT = 15;\r\n} else if (window.innerHeight > 1320 && window.innerHeight < 2000) {\r\n    STORY_INCREMENT = 20;\r\n} else if (window.innerHeight >= 2000) {\r\n    STORY_INCREMENT = 30;\r\n}\r\n\r\nexport { STORY_INCREMENT, MAX_STORIES };","import React from 'react';\r\nimport { getNewStorieIds } from \"../services/api\";\r\nimport { Story } from './Story';\r\nimport { Loader } from './Loader';\r\nimport { STORY_INCREMENT, MAX_STORIES } from \"../constants/constants\";\r\n\r\n\r\nclass StoriesContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newStoryIds: [],\r\n            counts: STORY_INCREMENT\r\n        }\r\n\r\n        this.handleScroll = this.handleScroll.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        getNewStorieIds().then((newStoreiesIds) => {\r\n            if (newStoreiesIds !== undefined && newStoreiesIds !== null) {\r\n                this.setState({ newStoryIds: newStoreiesIds });\r\n            }\r\n        });\r\n        window.addEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"scroll\", this.handleScroll);\r\n    }\r\n\r\n\r\n    handleScroll() {\r\n        const innerHeight = window.innerHeight;\r\n        const scrollPosition = window.document.documentElement.scrollTop;\r\n        const offSetHeight = window.document.documentElement.offsetHeight;\r\n\r\n        const totalScroll = innerHeight + scrollPosition;\r\n        if ((totalScroll > offSetHeight || totalScroll === offSetHeight)) {\r\n            if (this.state.counts + STORY_INCREMENT >= MAX_STORIES) {\r\n                this.setState({ counts: MAX_STORIES });\r\n            } else {\r\n                this.setState({ counts: this.state.counts + STORY_INCREMENT });\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"stories\" data-testid=\"stories\">\r\n                {this.state.newStoryIds.length > 0 ?\r\n                    this.state.newStoryIds.slice(0, this.state.counts).map((storyId, index) => {\r\n                        return (<Story key={index} storyId={storyId} />)\r\n                    })\r\n                    :\r\n                    <Loader />\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport { StoriesContainer };","import React from \"react\";\r\n\r\nfunction Credits() {\r\n    return (\r\n        <div className=\"credits-ribbon\">\r\n            Powered by Hacker News API\r\n        </div>\r\n    );\r\n}\r\n\r\nexport { Credits }\r\n","import React from \"react\";\r\n\r\nfunction Title() {\r\n    return (\r\n        <h1 className=\"AppTitle\" data-testid=\"appTitle\">Hacker News Stories</h1>\r\n    );\r\n}\r\n\r\nexport { Title }\r\n","import React from 'react';\r\nimport { StoriesContainer } from \"./components/StoriesContainer\";\r\nimport { Credits } from './components/Credits';\r\nimport { Title } from './components/Title';\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Credits />\r\n      <Title />\r\n      <StoriesContainer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport { App };\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { render } from 'react-dom';\r\nimport { App } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport \"./styles/index.css\";\r\n\r\nrender(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorker.register();\r\n"],"sourceRoot":""}